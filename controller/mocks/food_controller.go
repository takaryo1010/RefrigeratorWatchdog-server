// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller/food_controller.go
//
// Generated by this command:
//
//	mockgen -source ./controller/food_controller.go -destination controller/mocks/food_controller.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockIFoodController is a mock of IFoodController interface.
type MockIFoodController struct {
	ctrl     *gomock.Controller
	recorder *MockIFoodControllerMockRecorder
}

// MockIFoodControllerMockRecorder is the mock recorder for MockIFoodController.
type MockIFoodControllerMockRecorder struct {
	mock *MockIFoodController
}

// NewMockIFoodController creates a new mock instance.
func NewMockIFoodController(ctrl *gomock.Controller) *MockIFoodController {
	mock := &MockIFoodController{ctrl: ctrl}
	mock.recorder = &MockIFoodControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFoodController) EXPECT() *MockIFoodControllerMockRecorder {
	return m.recorder
}

// CreateFood mocks base method.
func (m *MockIFoodController) CreateFood(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFood", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFood indicates an expected call of CreateFood.
func (mr *MockIFoodControllerMockRecorder) CreateFood(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFood", reflect.TypeOf((*MockIFoodController)(nil).CreateFood), c)
}

// DeleteFood mocks base method.
func (m *MockIFoodController) DeleteFood(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFood", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFood indicates an expected call of DeleteFood.
func (mr *MockIFoodControllerMockRecorder) DeleteFood(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFood", reflect.TypeOf((*MockIFoodController)(nil).DeleteFood), c)
}

// GetFoodsByUserID mocks base method.
func (m *MockIFoodController) GetFoodsByUserID(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodsByUserID", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFoodsByUserID indicates an expected call of GetFoodsByUserID.
func (mr *MockIFoodControllerMockRecorder) GetFoodsByUserID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodsByUserID", reflect.TypeOf((*MockIFoodController)(nil).GetFoodsByUserID), c)
}

// UpdateFood mocks base method.
func (m *MockIFoodController) UpdateFood(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFood", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFood indicates an expected call of UpdateFood.
func (mr *MockIFoodControllerMockRecorder) UpdateFood(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFood", reflect.TypeOf((*MockIFoodController)(nil).UpdateFood), c)
}
