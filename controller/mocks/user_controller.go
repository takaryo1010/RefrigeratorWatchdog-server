// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller/user_controller.go
//
// Generated by this command:
//
//	mockgen -source ./controller/user_controller.go -destination controller/mocks/user_controller.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserController is a mock of IUserController interface.
type MockIUserController struct {
	ctrl     *gomock.Controller
	recorder *MockIUserControllerMockRecorder
}

// MockIUserControllerMockRecorder is the mock recorder for MockIUserController.
type MockIUserControllerMockRecorder struct {
	mock *MockIUserController
}

// NewMockIUserController creates a new mock instance.
func NewMockIUserController(ctrl *gomock.Controller) *MockIUserController {
	mock := &MockIUserController{ctrl: ctrl}
	mock.recorder = &MockIUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserController) EXPECT() *MockIUserControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserController) CreateUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserControllerMockRecorder) CreateUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserController)(nil).CreateUser), c)
}

// DeleteUser mocks base method.
func (m *MockIUserController) DeleteUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserControllerMockRecorder) DeleteUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserController)(nil).DeleteUser), c)
}

// GetUser mocks base method.
func (m *MockIUserController) GetUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserControllerMockRecorder) GetUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserController)(nil).GetUser), c)
}

// UpdateUser mocks base method.
func (m *MockIUserController) UpdateUser(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserControllerMockRecorder) UpdateUser(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserController)(nil).UpdateUser), c)
}
