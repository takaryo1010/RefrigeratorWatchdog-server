// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/food_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/food_repository.go -destination=mocks/food_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "RefrigeratorWatchdog-server/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFoodRepository is a mock of IFoodRepository interface.
type MockIFoodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFoodRepositoryMockRecorder
}

// MockIFoodRepositoryMockRecorder is the mock recorder for MockIFoodRepository.
type MockIFoodRepositoryMockRecorder struct {
	mock *MockIFoodRepository
}

// NewMockIFoodRepository creates a new mock instance.
func NewMockIFoodRepository(ctrl *gomock.Controller) *MockIFoodRepository {
	mock := &MockIFoodRepository{ctrl: ctrl}
	mock.recorder = &MockIFoodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFoodRepository) EXPECT() *MockIFoodRepositoryMockRecorder {
	return m.recorder
}

// CreateFood mocks base method.
func (m *MockIFoodRepository) CreateFood(food *model.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFood", food)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFood indicates an expected call of CreateFood.
func (mr *MockIFoodRepositoryMockRecorder) CreateFood(food any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFood", reflect.TypeOf((*MockIFoodRepository)(nil).CreateFood), food)
}

// DeleteFood mocks base method.
func (m *MockIFoodRepository) DeleteFood(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFood", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFood indicates an expected call of DeleteFood.
func (mr *MockIFoodRepositoryMockRecorder) DeleteFood(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFood", reflect.TypeOf((*MockIFoodRepository)(nil).DeleteFood), id)
}

// GetFoodsByUserID mocks base method.
func (m *MockIFoodRepository) GetFoodsByUserID(foods *[]model.Food, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoodsByUserID", foods, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFoodsByUserID indicates an expected call of GetFoodsByUserID.
func (mr *MockIFoodRepositoryMockRecorder) GetFoodsByUserID(foods, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoodsByUserID", reflect.TypeOf((*MockIFoodRepository)(nil).GetFoodsByUserID), foods, userID)
}

// UpdateFood mocks base method.
func (m *MockIFoodRepository) UpdateFood(food *model.Food, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFood", food, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFood indicates an expected call of UpdateFood.
func (mr *MockIFoodRepositoryMockRecorder) UpdateFood(food, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFood", reflect.TypeOf((*MockIFoodRepository)(nil).UpdateFood), food, id)
}
